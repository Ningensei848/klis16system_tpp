% [定理 ２５] ----------------------------------------------------------;
% △ABCの頂点A,B,Cから直線gに降ろした垂線の足をD,E,Fとすると、
% 点D,E,FからそれぞれBC, CA, ABにおろした垂線DP,EQ,FRは一点で交わる
% A(u1, u2) B(0, 0) C(u3, 0)
% D(x1, x2) E(x3, x4) F(x5, x6)
% P(x7, x8) Q(x9, x10) R(x11, x12)
%----------------------------------------------------------------------;

% 関数定義読み込み） ----------------------------------------------------;

load_package groebner;


on comp,gcd,ezgcd;


off allfac,pwrds;



in cal_sys_relations$




% ２点間のユークリッド距離D^2 -----------------------------------------------;
procedure squared_euclid(a1,a2,b1,b2)$
begin
 scalar d;
 d:=(a1-b1)^2+(a2-b2)^2;
 return d
end$


%----------------------------------------------------------------------;


% ---------------------------------------------------------------------;
% ＜証明＞ -------------------------------------------------------------;

order x12, x11, x10, x9, x8, x7, x6, x5, x4, x3, x2, x1, u3, u2, u1;


factor x12, x11, x10, x9, x8, x7, x6, x5, x4, x3, x2, x1;



%----------------------------------------------------------------------;
% 仮定 ----------------------------------------------------------------;

% D-E-Fは共線となっている
h1:=collinear(x1, x2, x3, x4, x5, x6);


h1 := x6*x3 - x6*x1 - x5*x4 + x5*x2 + x4*x1 - x3*x2


% AD⊥EF , BE⊥FD , CF⊥DE
h2:=vertically(u1, u2, x1, x2, x3, x4, x5, x6);


h2 := x6*x2 - x6*u2 + x5*x1 - x5*u1 - x4*x2 + x4*u2 - x3*x1 + x3*u1

h3:=vertically(0, 0, x3, x4, x5, x6, x1, x2);


h3 :=  - x6*x4 - x5*x3 + x4*x2 + x3*x1

h4:=vertically(u3, 0, x5, x6, x1, x2, x3, x4);


h4 := x6*x4 - x6*x2 + x5*x3 - x5*x1 - x3*u3 + x1*u3


% 点D,E,Fからそれぞれ辺BC,CA,ABに下ろした垂線の足をP,Q,Rとする
% DP⊥BC かつ B-P-C
h5:=vertically(x1, x2, x7, x8, 0, 0, u3, 0);


h5 := x7*u3 - x1*u3

h6:=collinear(0, 0, x7, x8, u3, 0);


h6 :=  - x8*u3


% EQ⊥CA かつ C-Q-A
h7:=vertically(x3, x4, x9, x10, u3, 0, u1, u2);


h7 := x10*u2 + x9*( - u3 + u1) - x4*u2 + x3*(u3 - u1)

h8:=collinear(u3, 0, x9, x10, u1, u2);


h8 := x10*(u3 - u1) + x9*u2 - u3*u2


% FR⊥AB かつ A-R-B
h9:=vertically(x5, x6, x11, x12, u1, u2, 0, 0);


h9 :=  - x12*u2 - x11*u1 + x6*u2 + x5*u1

h10:=collinear(u1, u2, x11, x12, 0, 0);


h10 := x12*u1 - x11*u2


%----------------------------------------------------------------------;
% 結論 ----------------------------------------------------------------;

% DP, EQ, FRの共点を言うためには、§６例３により、
% DB^2 - DC^2 + EC^2 -EA^2 + FA^2 -FB^2 = 0 を示せれば良い

db2:=squared_euclid(x1, x2, 0, 0);


         2     2
db2 := x2  + x1

dc2:=squared_euclid(x1, x2, u3, 0);


         2     2               2
dc2 := x2  + x1  - 2*x1*u3 + u3

ec2:=squared_euclid(x3, x4, u3, 0);


         2     2               2
ec2 := x4  + x3  - 2*x3*u3 + u3

ea2:=squared_euclid(x3, x4, u1, u2);


         2               2               2     2
ea2 := x4  - 2*x4*u2 + x3  - 2*x3*u1 + u2  + u1

fa2:=squared_euclid(x5, x6, u1, u2);


         2               2               2     2
fa2 := x6  - 2*x6*u2 + x5  - 2*x5*u1 + u2  + u1

fb2:=squared_euclid(x5, x6, 0, 0);


         2     2
fb2 := x6  + x5


conclusion:=db2-dc2+ec2-ea2+fa2-fb2;


conclusion :=  - 2*x6*u2 - 2*x5*u1 + 2*x4*u2 + x3*( - 2*u3 + 2*u1) + 2*x1*u3



%----------------------------------------------------------------------;
% Groebner Basis: 結果が1となったら、仮定が誤っている可能性が高い ---------------;

%%% 変数を定義し、lex形式で並べる ------------------------------------------;
torder({x12, x11, x10, x9, x8, x7, x6, x5, x4, x3, x2, x1}, lex)$



%%% 仮定において定義した式からGroebner Basisを求める -------------------------;
gb:=groebner{h1, h2, h3, h4, h5, h6, h7, h8, h9, h10};


             2     2          2
gb := { - (u1  + u2 )*x12 + u2 *x4 + (u1*u2 - u2*u3)*x3 + (u2*u3)*x1,

          2     2                        2
       (u1  + u2 )*x11 - (u1*u2)*x4 - (u1  - u1*u3)*x3 - (u1*u3)*x1,

          2               2     2          2
       (u1  - 2*u1*u3 + u2  + u3 )*x10 - u2 *x4 - (u1*u2 - u2*u3)*x3

                           2
        + (u1*u2*u3 - u2*u3 ),

          2               2     2
       (u1  - 2*u1*u3 + u2  + u3 )*x9 - (u1*u2 - u2*u3)*x4

             2               2         2
        - (u1  - 2*u1*u3 + u3 )*x3 - u2 *u3,

       x8,

       x7 - x1,

        - u2*x6 - u1*x5 + u2*x4 + (u1 - u3)*x3 + u3*x1,

             3        2             2        3             2       2
        - (u1  + u1*u2 )*x5*x4 + (u1 *u2 + u2 )*x5*x1 + (u1 *u2)*x4

             3     2           2             2                2
        + (u1  - u1 *u3 + u1*u2 )*x4*x3 - (u1 *u2)*x4*x2 + (u1 *u3)*x4*x1

             2                  2      2
        + (u1 *u2 - u1*u2*u3)*x3  - (u2 *u3)*x3*x2

               2                     3             3             2
        - (2*u1 *u2 - 2*u1*u2*u3 + u2 )*x3*x1 + (u2 *u3)*x3 + (u2 *u3)*x2*x1

                       2      3
        - (u1*u2*u3)*x1  - (u2 *u3)*x1,

          2     2             2     2            2   2
       (u1  + u2 )*x5*x3 - (u1  + u2 )*x5*x1 + u2 *x4  - (u2*u3)*x4*x3

            2                            2            2
        - u2 *x4*x2 + (u2*u3)*x4*x1 - (u1  - u1*u3)*x3  + (u2*u3)*x3*x2

             2                       2                                    2
        + (u1  - 2*u1*u3)*x3*x1 - (u2 *u3)*x3 - (u2*u3)*x2*x1 + (u1*u3)*x1

             2
        + (u2 *u3)*x1,

       u1*x5*x2 - u2*x5*x1 - (u1 - u3)*x3*x2 + u2*x3*x1 - (u2*u3)*x3 - u3*x2*x1

        + (u2*u3)*x1,

                    3      2            2         2               2    2
        - (u1*u2)*x4  - (u1  - u1*u3)*x4 *x3 + (u1  - u1*u3 + 2*u2 )*x4 *x1

                       2
        - (u1*u2)*x4*x3  + (u1*u2 - 2*u2*u3)*x4*x3*x1

             2                                     2        2
        + (u1 *u2 + u1*u2*u3)*x4*x3 + (u1*u2)*x4*x2  - (2*u2 )*x4*x2*x1

                         2      2                           2            3
        + (2*u2*u3)*x4*x1  - (u1 *u2 + u1*u2*u3)*x4*x1 - (u1  - u1*u3)*x3

                              2         2               2    2
        - (u1*u2 - 2*u2*u3)*x3 *x2 + (u1  - u1*u3 + 2*u2 )*x3 *x1

             3     2          2       2      2               2
        + (u1  - u1 *u3 - 2*u2 *u3)*x3  + (u1  - u1*u3)*x3*x2

                                          2
        + (u1*u2 - 2*u2*u3)*x3*x2*x1 - (u1 *u2 - u1*u2*u3)*x3*x2

             2               2       2        3       2          2
        + (u1  - u1*u3 - 2*u2 )*x3*x1  - (2*u1  - 2*u1 *u3 - 2*u2 *u3)*x3*x1

             2            2         2                           2            3
        - (u1  - u1*u3)*x2 *x1 + (u1 *u2 - u1*u2*u3)*x2*x1 - (u1  - u1*u3)*x1

             3     2       2
        + (u1  - u1 *u3)*x1 ,

               2                   2           2   2             2
        - u2*x4 *x3*x1 + (u1*u2)*x4 *x3 + u2*x4 *x1  - (u1*u2)*x4 *x1

                         2         2               2                         2
        - (u1 - u3)*x4*x3 *x1 + (u1  - u1*u3)*x4*x3  + (2*u1 - 2*u3)*x4*x3*x1

               2               2                   2                         3
        - (2*u1  - 2*u1*u3 - u2 )*x4*x3*x1 - (u1*u2 )*x4*x3 - (u1 - u3)*x4*x1

             2             2       2         2                      3
        + (u1  - u1*u3 - u2 )*x4*x1  + (u1*u2 )*x4*x1 + (u1 - u3)*x3 *x2

               3                3                   2              2   2
        - u2*x3 *x1 + (u2*u3)*x3  - (2*u1 - 2*u3)*x3 *x2*x1 + u2*x3 *x1

                                2         2       2           2
        + (2*u1*u2 - 2*u2*u3)*x3 *x1 - (u1 *u2)*x3  + u2*x3*x2 *x1

                       2                     2     2                  2
        - (u1*u2)*x3*x2  + (u1 - u3)*x3*x2*x1  - u2 *x3*x2*x1 + (u1*u2 )*x3*x2

                  3                          2        2                  2   2
        + u2*x3*x1  - (4*u1*u2 - u2*u3)*x3*x1  + (2*u1 *u2)*x3*x1 - u2*x2 *x1

                    2        2      2         2               4               3
        + (u1*u2)*x2 *x1 + u2 *x2*x1  - (u1*u2 )*x2*x1 - u2*x1  + (2*u1*u2)*x1

             2       2
        - (u1 *u2)*x1 ,

               2           2                                            2
        - u1*x4 *x2 + u2*x4 *x1 - u3*x4*x3*x1 + (u1*u3)*x4*x3 + u1*x4*x2

                                2                               2           2
        - u2*x4*x2*x1 + u3*x4*x1  - (u1*u3)*x4*x1 - (u1 - u3)*x3 *x2 + u2*x3 *x1

                    2                                2
        - (u2*u3)*x3  + (u1 - u3)*x3*x2*x1 - u2*x3*x1  + (u2*u3)*x3*x1,

                  2   2                  2         2          2
        - u2*x4*x3 *x1  + (2*u1*u2)*x4*x3 *x1 - (u1 *u2)*x4*x3

                         3                     2        2
        + (2*u2)*x4*x3*x1  - (4*u1*u2)*x4*x3*x1  + (2*u1 *u2)*x4*x3*x1

                  4                  3      2          2               3   2
        - u2*x4*x1  + (2*u1*u2)*x4*x1  - (u1 *u2)*x4*x1  - (u1 - u3)*x3 *x2

               3                             3                  3   2
        + u2*x3 *x2*x1 + (u1*u2 - 2*u2*u3)*x3 *x2 - (u1 - u3)*x3 *x1

               2               2    3         3     2        2       3
        + (2*u1  - 2*u1*u3 - u2 )*x3 *x1 - (u1  - u1 *u3 - u2 *u3)*x3

                          2   2         2            2   2            2      2
        + (3*u1 - 3*u3)*x3 *x2 *x1 - (u1  - u1*u3)*x3 *x2  - (2*u2)*x3 *x2*x1

                                2            2                  2
        - (3*u1*u2 - 5*u2*u3)*x3 *x2*x1 + (u1 *u2 - u1*u2*u3)*x3 *x2

                          2   3        2                 2    2   2
        + (3*u1 - 3*u3)*x3 *x1  - (6*u1  - 6*u1*u3 - 2*u2 )*x3 *x1

               3       2          2       2                         2   2
        + (3*u1  - 3*u1 *u3 - 2*u2 *u3)*x3 *x1 - (3*u1 - 3*u3)*x3*x2 *x1

               2                 2                 3
        + (2*u1  - 2*u1*u3)*x3*x2 *x1 + u2*x3*x2*x1

                                      2        2
        + (3*u1*u2 - 4*u2*u3)*x3*x2*x1  - (2*u1 *u2 - 2*u1*u2*u3)*x3*x2*x1

                             4        2               2       3
        - (3*u1 - 3*u3)*x3*x1  + (6*u1  - 6*u1*u3 - u2 )*x3*x1

               3       2        2          2               2   3
        - (3*u1  - 3*u1 *u3 - u2 *u3)*x3*x1  + (u1 - u3)*x2 *x1

             2            2   2                        3
        - (u1  - u1*u3)*x2 *x1  - (u1*u2 - u2*u3)*x2*x1

             2                     2               5        2              4
        + (u1 *u2 - u1*u2*u3)*x2*x1  + (u1 - u3)*x1  - (2*u1  - 2*u1*u3)*x1

             3     2       3
        + (u1  - u1 *u3)*x1 ,

                                                     2           2        2
       x4*x3*x2 - u2*x4*x3 - x4*x2*x1 + u2*x4*x1 + x3 *x1 - u1*x3  - x3*x2

                            2                    2                   3        2
        + u2*x3*x2 - 2*x3*x1  + (2*u1)*x3*x1 + x2 *x1 - u2*x2*x1 + x1  - u1*x1 ,

                      3   3        3   2                            3   2
        - (u1 - u3)*x3 *x2  + u2*x3 *x2 *x1 + (2*u1*u2 - 3*u2*u3)*x3 *x2

                      3      2        2                 2    3
        - (u1 - u3)*x3 *x2*x1  + (2*u1  - 2*u1*u3 - 2*u2 )*x3 *x2*x1

             3     2           2       2       3           3   3
        - (u1  - u1 *u3 + u1*u2  - 3*u2 *u3)*x3 *x2 + u2*x3 *x1

                              3   2      2                     3    3
        - (2*u1*u2 + u2*u3)*x3 *x1  + (u1 *u2 + 2*u1*u2*u3 + u2 )*x3 *x1

             2           3       3                   2   3
        - (u1 *u2*u3 + u2 *u3)*x3  + (3*u1 - 3*u3)*x3 *x2 *x1

             2            2   3            2   2   2
        - (u1  - u1*u3)*x3 *x2  - (3*u2)*x3 *x2 *x1

                                2   2         2                    2   2
        - (4*u1*u2 - 8*u2*u3)*x3 *x2 *x1 + (u1 *u2 - 2*u1*u2*u3)*x3 *x2

                          2      3        2                 2    2      2
        + (3*u1 - 3*u3)*x3 *x2*x1  - (6*u1  - 6*u1*u3 - 5*u2 )*x3 *x2*x1

               3       2           2       2       2               2       2
        + (3*u1  - 3*u1 *u3 + u1*u2  - 7*u2 *u3)*x3 *x2*x1 + (u1*u2 *u3)*x3 *x2

                   2   4                         2   3
        - (3*u2)*x3 *x1  + (6*u1*u2 + 3*u2*u3)*x3 *x1

               2                       3    2   2
        - (3*u1 *u2 + 6*u1*u2*u3 + 2*u2 )*x3 *x1

               2             3       2                         3   2
        + (3*u1 *u2*u3 + 2*u2 *u3)*x3 *x1 - (3*u1 - 3*u3)*x3*x2 *x1

               2                 3                  2   3
        + (2*u1  - 2*u1*u3)*x3*x2 *x1 + (3*u2)*x3*x2 *x1

                                   2   2        2                       2
        + (2*u1*u2 - 7*u2*u3)*x3*x2 *x1  - (2*u1 *u2 - 4*u1*u2*u3)*x3*x2 *x1

                                4        2                 2          3
        - (3*u1 - 3*u3)*x3*x2*x1  + (6*u1  - 6*u1*u3 - 4*u2 )*x3*x2*x1

               3       2           2       2             2
        - (3*u1  - 3*u1 *u3 - u1*u2  - 5*u2 *u3)*x3*x2*x1

                  2                            5                            4
        - (2*u1*u2 *u3)*x3*x2*x1 + (3*u2)*x3*x1  - (6*u1*u2 + 3*u2*u3)*x3*x1

               2                     3       3        2           3          2
        + (3*u1 *u2 + 6*u1*u2*u3 + u2 )*x3*x1  - (3*u1 *u2*u3 + u2 *u3)*x3*x1

                      3   3      2            3   2        2   4
        + (u1 - u3)*x2 *x1  - (u1  - u1*u3)*x2 *x1  - u2*x2 *x1

                      2   3      2                    2   2                  5
        + (2*u2*u3)*x2 *x1  + (u1 *u2 - 2*u1*u2*u3)*x2 *x1  + (u1 - u3)*x2*x1

               2               2       4
        - (2*u1  - 2*u1*u3 - u2 )*x2*x1

             3     2           2     2          3         2          2        6
        + (u1  - u1 *u3 - u1*u2  - u2 *u3)*x2*x1  + (u1*u2 *u3)*x2*x1  - u2*x1

                              5      2                    4      2          3
        + (2*u1*u2 + u2*u3)*x1  - (u1 *u2 + 2*u1*u2*u3)*x1  + (u1 *u2*u3)*x1 }


%---------------------------------------------------------;
% 「glterms」が出力するのは、グレブナー基底の計算過程で〈ゼロにはならない〉
% と仮定された式のリストである。
%---------------------------------------------------------;

%%% u に関する制約条件 --------------------------------------------------;
glterms;


{u3,

 u2,

  - u3 + u1,

 u1,

   2               2     2
 u3  - 2*u3*u1 + u2  + u1 ,

   2     2
 u2  + u1 ,

              2     2
  - u3*u1 + u2  + u1 }



%%% gbを法としてgを簡約 --------------------------------------------------;
preduce(conclusion, gb);


0


% ==> 0 になっていれば、定理は成立 ------------------------------------------;

showtime;


Time: 110 ms  plus GC time: 29 ms

;

end;

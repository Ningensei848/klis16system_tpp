% [定理 09] ----------------------------------------------------------;
% 三角形の内角または外角の２等分線は、対辺を他の２辺の比に分ける
% △ABCにおいて、∠Aおよびその外角の２等分線がBCおよび
% その延長を交わる点をD,Eとする
% ※ただし、座標軸上で点Eがx軸上に存在するように各点を取る
% A(0, 0) B(u1, u2) C(u3, u4)
% D(x1, x2) E(x3, 0) F(x5, x6) G(x6, x7)
%----------------------------------------------------------------------;

% 関数定義読み込み） ----------------------------------------------------;

load_package groebner;
on comp,gcd,ezgcd;
off allfac,pwrds;

in cal_sys_relations$


% ２点間のユークリッド距離D^2 -----------------------------------------------;
procedure squared_euclid(a1,a2,b1,b2)$
begin
 scalar d;
 d:=(a1-b1)^2+(a2-b2)^2;
 return d
end$
%----------------------------------------------------------------------;


% ---------------------------------------------------------------------;
% ＜証明＞ -------------------------------------------------------------;

order x7, x6, x5, x4, x3, x2, x1, u4, u3, u2, u1;
factor x7, x6, x5, x4, x3, x2, x1;

% ---------------------------------------------------------------------;
% 仮定 ----------------------------------------------------------------;

% 点Cを通ってADに対して平行に引いた直線とABとの交点をFとする
% AD//FC かつ B-A-F かつ B-D-C

h1:=parallel(0, 0, x1, x2, x4, x5, u3, u4);
h2:=collinear(u1, u2, 0, 0, x4, x5);
h3:=collinear(u1, u2, x1, x2, u3, u4);

% 点Cを通ってAEに対して平行に引いた直線とABとの交点をGとする
% AE//GC かつ B-C-E かつ B-G-A

h4:=parallel(0, 0, x3, 0, x6, x7, u3, u4);
h5:=collinear(u1, u2, u3, u4, x3, 0);
h6:=collinear(u1, u2, x6, x7, 0, 0);

% ∠AFC=∠BAD=∠CAD=∠ACF から　∴ AF=AC
% ∠AGC=∠FAE=∠CAE=∠ACG から　∴ AG=AC

h7:=requal(0, 0, x4, x5, 0, 0, u3, u4);
h8:=requal(0, 0, x6, x7, 0, 0, u3, u4);

% よって、△AGC, △ACEは二等辺三角形となる
% ここで、二等辺三角形の頂角の二等分線は底辺と直角に交わることから、
% AD⊥GC , AE⊥CF である

h9:=vertically(0, 0, x1, x2, x6, x7, u3, u4);
h10:=vertically(0, 0, x3, 0, u3, u4, x4, x5);


% ---------------------------------------------------------------------;
% 結論 (内角の2等分線) -------------------------------------------------;

% 内角の2等分線が、対辺を他の2辺の比に分ける場合、
% BD:DC=AB:AC  <=>  (BD*AC)^2 = (AB*DC)^2

bd2:=squared_euclid(u1, u2, x1, x2);
dc2:=squared_euclid(x1, x2, u3, u4);
ab2:=squared_euclid(0, 0, u1, u2);
ac2:=squared_euclid(0, 0, u3, u4);

in_conclusion:=bd2*ac2-ab2*dc2;


%----------------------------------------------------------------------;
% Groebner Basis: 結果が1となったら、仮定が誤っている可能性が高い ---------------;

%%% 変数を定義し、lex形式で並べる ------------------------------------------;
torder({x1, x2, x3, x4, x5, x6, x7}, lex)$

%%% 仮定において定義した式からGroebner Basisを求める -------------------------;
gb:=groebner{h1, h2, h3, h7, h9, h6};

%---------------------------------------------------------;
% 「glterms」が出力するのは、グレブナー基底の計算過程で〈ゼロにはならない〉
% と仮定された式のリストである。
%---------------------------------------------------------;

%%% u に関する制約条件 --------------------------------------------------;
glterms;


%%% gbを法としてgを簡約 --------------------------------------------------;
preduce(in_conclusion, gb);

% ==> 0 になっていれば、定理は成立 ------------------------------------------;



% ###################################################################



% ---------------------------------------------------------------------;
% 結論 (外角の2等分線) -------------------------------------------------;

% 外角の2等分線が、対辺を他の2辺の比に分ける場合、
% BE:EC=AB:AC  <=>  (BE*AC)^2 = (AB*EC)^2

be2:=squared_euclid(u1, u2, x3, 0);
ec2:=squared_euclid(x3, 0, u3, u4);
% ab2:=squared_euclid(0, 0, u1, u2); % 既出
% ac2:=squared_euclid(0, 0, u3, u4); % 既出

ex_conclusion:=be2*ac2-ab2*ec2;


%----------------------------------------------------------------------;
% Groebner Basis: 結果が1となったら、仮定が誤っている可能性が高い ---------------;

%%% 変数を定義し、lex形式で並べる ------------------------------------------;
torder({x1, x2, x3, x4, x5, x6, x7}, lex)$

%%% 仮定において定義した式からGroebner Basisを求める -------------------------;
gb:=groebner{h4, h5, h6, h7, h10};

%---------------------------------------------------------;
% 「glterms」が出力するのは、グレブナー基底の計算過程で〈ゼロにはならない〉
% と仮定された式のリストである。
%---------------------------------------------------------;

%%% u に関する制約条件 --------------------------------------------------;
glterms;


%%% gbを法としてgを簡約 --------------------------------------------------;
preduce(ex_conclusion, gb);

% ==> 0 になっていれば、定理は成立 ------------------------------------------;

showtime;
;end;